name: Reusable CI

on:
  workflow_call:
    inputs:
      all-features:
        type: boolean
        default: true

jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      CARGO_LOCKED: "true"
      CARGO_TERM_COLOR: always

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true  # оставляем токен в origin, чтобы git push работал

      - name: Read MSRV from Cargo.toml
        id: msrv
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi
          RV=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[0].rust_version // empty')
          if [ -z "$RV" ]; then
            echo "rust-version is not set in Cargo.toml"
            exit 1
          fi
          [[ "$RV" =~ ^[0-9]+\.[0-9]+$ ]] && RV="${RV}.0"
          echo "msrv=${RV}" >> "$GITHUB_OUTPUT"
          echo "Using MSRV: $RV"

      - name: Install Rust (${{ steps.msrv.outputs.msrv }})
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ steps.msrv.outputs.msrv }}
          components: clippy

      - name: Install nightly rustfmt
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Verify lockfile is committed
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f Cargo.lock ]; then
            echo "CARGO_LOCKED=1 but Cargo.lock is missing. Commit it or drop CARGO_LOCKED."
            exit 1
          fi

      # ---------- README handling ----------
      - name: Build (may regenerate README to temp)
        shell: bash
        env:
          TZ: UTC
          LC_ALL: C.UTF-8
          NO_COLOR: "1"
          CARGO_TERM_COLOR: never
          SOURCE_DATE_EPOCH: "0"
        run: |
          set -euo pipefail
          tmp="$(mktemp)"
          cargo +${{ steps.msrv.outputs.msrv }} build --workspace -q || cargo +${{ steps.msrv.outputs.msrv }} build -q
          if [ -f README.md ]; then
            cp -f README.md "$tmp"
            last_byte="$(tail -c1 "$tmp" 2>/dev/null || true)"
            if [ "${last_byte:-}" != $'\n' ]; then printf '\n' >> "$tmp"; fi
          else
            : > "$tmp"
          fi
          echo "README_CANDIDATE=$tmp" >> "$GITHUB_ENV"

      - name: README drift on PR (report only)
        if: github.event_name == 'pull_request'
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f README.md ]; then
            echo "README.md missing in repo; nothing to compare."
            exit 0
          fi
          if ! diff -u --label "README.md (HEAD)" --label "README.md (generated)" README.md "$README_CANDIDATE" >/tmp/readme.diff 2>/dev/null; then
            echo "::warning::README differs on PR. Tests proceed with HEAD, not rewriting the file."
            git --no-pager diff --no-index -- README.md "$README_CANDIDATE" || true
          else
            echo "README is up to date (PR)."
          fi

      - name: README autocommit on main (push or PR)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: readme_update
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          need_update=0
          if [ ! -f README.md ]; then
            need_update=1
          elif ! cmp -s README.md "$README_CANDIDATE"; then
            need_update=1
          fi
          if [ "$need_update" -eq 0 ]; then
            echo "README is up to date (main)."
            echo "updated=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "Updating README working tree..."
          cp -f "$README_CANDIDATE" README.md
          git add README.md

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

          git commit -m "chore(readme): auto-refresh [skip ci]" || true

          set +e
          git pull --rebase --autostash origin main
          git push origin HEAD:main
          rc=$?
          set -e

          if [ $rc -eq 0 ]; then
            echo "Push to main succeeded."
            echo "updated=true" >> "$GITHUB_OUTPUT"
            # вычистим дерево, чтобы дальше всё было чисто
            git fetch origin main
            git reset --hard origin/main
            git clean -fdx
            exit 0
          fi

          echo "Push to main denied (likely branch protection). Preparing PR..."
          echo "updated=true" >> "$GITHUB_OUTPUT"
          # создаём ветку для PR
          BR="ci/readme-auto-refresh"
          git switch -c "$BR" || git checkout -b "$BR"
          # коммит уже есть, просто запушим ветку
          git push -u origin "$BR"

      - name: Create pull request for README (fallback)
        if: steps.readme_update.outputs.updated == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ci/readme-auto-refresh
          title: "chore(readme): auto-refresh"
          body: |
            Автоматически сгенерированный апдейт README. Прямой пуш в `main` запрещён политикой, поэтому открыт PR.
          commit-message: "chore(readme): auto-refresh [skip ci]"
          labels: ci, chore
          delete-branch: true
      # ---------- end README handling ----------

      - name: Check formatting (nightly rustfmt)
        run: cargo +nightly fmt --all -- --check

      - name: Clippy (MSRV)
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ inputs.all-features }}" = "true" ]; then
            cargo +${{ steps.msrv.outputs.msrv }} clippy --workspace --all-targets --all-features -- -D warnings
          else
            cargo +${{ steps.msrv.outputs.msrv }} clippy --workspace --all-targets -- -D warnings
          fi

      - name: Tests (MSRV)
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ inputs.all-features }}" = "true" ]; then
            cargo +${{ steps.msrv.outputs.msrv }} test --workspace --all-features --no-fail-fast
          else
            cargo +${{ steps.msrv.outputs.msrv }} test --workspace --no-fail-fast
          fi

      - name: Auto-commit README changes (any branch)
        if: always()
        run: |
          set -euo pipefail
          if ! cmp -s README.md "$README_CANDIDATE"; then
            echo "README changed, committing..."
            cp -f "$README_CANDIDATE" README.md
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git config --global --add safe.directory "$GITHUB_WORKSPACE"
            git add README.md
            git commit -m "chore(readme): auto-refresh [skip ci]" || true
          else
            echo "README already up to date."
          fi

      - name: Ensure tree is clean before package
        shell: bash
        run: |
          set -euo pipefail
          if ! git diff --quiet; then
            echo "Working tree is dirty:"
            git status --porcelain
            exit 1
          fi

      - name: Package (dry-run)
        run: cargo +${{ steps.msrv.outputs.msrv }} package --locked

