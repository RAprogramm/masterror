# SPDX-FileCopyrightText: 2025 RAprogramm <andrey.rozanov.vl@gmail.com>
#
# SPDX-License-Identifier: MIT

name: Reusable CI

on:
  workflow_call:
    inputs:
      all-features:
        type: boolean
        default: true

jobs:
  validate-codecov-yaml:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5

      - name: Validate codecov.yml
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f .github/codecov.yml ]; then
            echo "codecov.yml not found, skipping validation"
            exit 0
          fi

          echo "Validating codecov.yml..."
          RESPONSE=$(cat .github/codecov.yml | curl -s --data-binary @- https://codecov.io/validate)

          if echo "$RESPONSE" | grep -q "^Valid!"; then
            echo "codecov.yml is valid"
            exit 0
          elif echo "$RESPONSE" | grep -q "^Error"; then
            echo "codecov.yml validation failed:"
            echo "$RESPONSE"
            exit 1
          else
            echo "Unexpected response from Codecov validator:"
            echo "$RESPONSE"
            exit 1
          fi

  msrv:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ steps.msrv.outputs.msrv }}
    steps:
      - uses: actions/checkout@v5

      - name: Read MSRV from Cargo.toml
        id: msrv
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi
          RV=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[0].rust_version // empty')
          if [ -z "$RV" ]; then
            echo "rust-version is not set in Cargo.toml"
            exit 1
          fi
          [[ "$RV" =~ ^[0-9]+\.[0-9]+$ ]] && RV="${RV}.0"
          echo "msrv=${RV}" >> "$GITHUB_OUTPUT"
          echo "Using MSRV: $RV"

  fmt:
    runs-on: ubuntu-latest
    needs: msrv
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust (${{ needs.msrv.outputs.version }})
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ needs.msrv.outputs.version }}

      - name: Install nightly rustfmt
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt

      - name: Check formatting (nightly rustfmt)
        uses: ./.github/actions/cargo-fmt
        with:
          toolchain: nightly

  clippy:
    runs-on: ubuntu-latest
    needs: msrv
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        rust:
          - ${{ needs.msrv.outputs.version }}
          - stable
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust (${{ matrix.rust }})
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          components: clippy

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          key: clippy-${{ matrix.rust }}
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Clippy (${{ matrix.rust }})
        uses: ./.github/actions/cargo-clippy
        with:
          toolchain: ${{ matrix.rust }}
          all-features: ${{ inputs.all-features }}

  deny:
    runs-on: ubuntu-latest
    needs: msrv
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust (${{ needs.msrv.outputs.version }})
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ needs.msrv.outputs.version }}

      - name: Cargo deny
        uses: ./.github/actions/cargo-deny

  audit:
    runs-on: ubuntu-latest
    needs: msrv
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust (${{ needs.msrv.outputs.version }})
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ needs.msrv.outputs.version }}

      - name: Security audit
        uses: ./.github/actions/cargo-audit

  test:
    runs-on: ubuntu-latest
    needs: [msrv, fmt, clippy]
    permissions:
      contents: write
      pull-requests: write
    strategy:
      fail-fast: false
      matrix:
        rust:
          - ${{ needs.msrv.outputs.version }}
          - stable
    env:
      CARGO_LOCKED: "true"
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Install Rust (${{ matrix.rust }})
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          key: test-${{ matrix.rust }}
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Verify lockfile is committed
        if: matrix.rust == needs.msrv.outputs.version
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f Cargo.lock ]; then
            echo "CARGO_LOCKED=1 but Cargo.lock is missing. Commit it or drop CARGO_LOCKED."
            exit 1
          fi

      - name: Build (may regenerate README to temp)
        if: matrix.rust == needs.msrv.outputs.version
        shell: bash
        env:
          TZ: UTC
          LC_ALL: C.UTF-8
          NO_COLOR: "1"
          CARGO_TERM_COLOR: never
          SOURCE_DATE_EPOCH: "0"
        run: |
          set -euo pipefail
          tmp="$(mktemp)"
          cargo +${{ matrix.rust }} build --workspace -q || cargo +${{ matrix.rust }} build -q
          if [ -f README.md ]; then
            cp -f README.md "$tmp"
            last_byte="$(tail -c1 "$tmp" 2>/dev/null || true)"
            if [ "${last_byte:-}" != $'\n' ]; then printf '\n' >> "$tmp"; fi
          else
            : > "$tmp"
          fi
          echo "README_CANDIDATE=$tmp" >> "$GITHUB_ENV"

      - name: README drift on PR (report only)
        if: github.event_name == 'pull_request' && matrix.rust == needs.msrv.outputs.version
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f README.md ]; then
            echo "README.md missing in repo; nothing to compare."
            exit 0
          fi
          if ! diff -u --label "README.md (HEAD)" --label "README.md (generated)" README.md "$README_CANDIDATE" >/tmp/readme.diff 2>/dev/null; then
            echo "::warning::README differs on PR. Tests proceed with HEAD, not rewriting the file."
            git --no-pager diff --no-index -- README.md "$README_CANDIDATE" || true
          else
            echo "README is up to date (PR)."
          fi

      - name: README autocommit on main (push or PR)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.rust == needs.msrv.outputs.version
        id: readme_update
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          need_update=0
          if [ ! -f README.md ]; then
            need_update=1
          elif ! cmp -s README.md "$README_CANDIDATE"; then
            need_update=1
          fi
          if [ "$need_update" -eq 0 ]; then
            echo "README is up to date (main)."
            echo "updated=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "Updating README working tree..."
          cp -f "$README_CANDIDATE" README.md
          git add README.md

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

          git commit -m "chore(readme): auto-refresh [skip ci]" || true

          set +e
          git pull --rebase --autostash origin main
          git push origin HEAD:main
          rc=$?
          set -e

          if [ $rc -eq 0 ]; then
            echo "Push to main succeeded."
            echo "updated=true" >> "$GITHUB_OUTPUT"
            git fetch origin main
            git reset --hard origin/main
            git clean -fdx
            exit 0
          fi

          echo "Push to main denied (likely branch protection). Preparing PR..."
          echo "updated=true" >> "$GITHUB_OUTPUT"
          BR="ci/readme-auto-refresh"
          git switch -c "$BR" || git checkout -b "$BR"
          git push -u origin "$BR"

      - name: Create pull request for README (fallback)
        if: steps.readme_update.outputs.updated == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.rust == needs.msrv.outputs.version
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ci/readme-auto-refresh
          title: "chore(readme): auto-refresh"
          body: |
            Автоматически сгенерированный апдейт README. Прямой пуш в `main` запрещён политикой, поэтому открыт PR.
          commit-message: "chore(readme): auto-refresh [skip ci]"
          labels: ci, chore
          delete-branch: true

      - name: Tests (${{ matrix.rust }})
        uses: ./.github/actions/cargo-test
        with:
          toolchain: ${{ matrix.rust }}
          all-features: ${{ inputs.all-features }}

      - name: Generate test report (JSON format)
        if: always()
        continue-on-error: true
        shell: bash
        run: |
          cargo +${{ matrix.rust }} test --all-features --workspace --no-fail-fast -- \
            --format json -Z unstable-options --report-time > test-results-${{ matrix.rust }}.json || true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.rust }}
          path: test-results-${{ matrix.rust }}.json
          retention-days: 30

      - name: Add test summary
        if: always() && matrix.rust == needs.msrv.outputs.version
        run: |
          echo "## Test Results (${{ matrix.rust }})" >> $GITHUB_STEP_SUMMARY
          echo "Test artifacts uploaded with 30-day retention" >> $GITHUB_STEP_SUMMARY
          echo "- Test report: \`test-results-${{ matrix.rust }}.json\`" >> $GITHUB_STEP_SUMMARY

      - name: Auto-commit README changes (any branch)
        if: always() && matrix.rust == needs.msrv.outputs.version
        run: |
          set -euo pipefail
          if ! cmp -s README.md "$README_CANDIDATE"; then
            echo "README changed, committing..."
            cp -f "$README_CANDIDATE" README.md
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git config --global --add safe.directory "$GITHUB_WORKSPACE"
            git add README.md
            git commit -m "chore(readme): auto-refresh [skip ci]" || true
          else
            echo "README already up to date."
          fi

  package:
    runs-on: ubuntu-latest
    needs: [msrv, test]
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust (${{ needs.msrv.outputs.version }})
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ needs.msrv.outputs.version }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Ensure tree is clean before package
        shell: bash
        run: |
          set -euo pipefail
          if ! git diff --quiet; then
            echo "Working tree is dirty:"
            git status --porcelain
            exit 1
          fi

      - name: Package (dry-run)
        run: cargo +${{ needs.msrv.outputs.version }} package --locked

  coverage:
    runs-on: ubuntu-latest
    needs: [test, validate-codecov-yaml]
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov and cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov,cargo-nextest

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Generate unit test coverage
        run: |
          cargo llvm-cov nextest --lib --all-features --workspace --lcov --output-path lcov-unit.info

      - name: Generate integration test coverage
        run: |
          cargo llvm-cov nextest --test '*' --all-features --workspace --lcov --output-path lcov-integration.info

      - name: Generate doc test coverage
        run: |
          cargo llvm-cov --doc --all-features --workspace --lcov --output-path lcov-doc.info

      - name: Validate coverage files
        run: |
          set -euo pipefail
          echo "=== Validating LCOV files ==="
          for f in lcov-unit.info lcov-integration.info lcov-doc.info; do
            if [ ! -f "$f" ]; then
              echo "ERROR: $f not found"
              exit 1
            fi
            size=$(wc -c < "$f")
            lines=$(wc -l < "$f")
            echo "✓ $f: ${size} bytes, ${lines} lines"
            if [ "$size" -eq 0 ]; then
              echo "WARNING: $f is empty"
            fi
            echo "First 10 lines of $f:"
            head -10 "$f"
            echo ""
          done

      - name: Generate JUnit XML test results
        if: success() || failure()
        run: |
          mkdir -p target/nextest/ci
          cargo nextest run --all-features --workspace --profile ci --no-fail-fast || true

      - name: "Codecov: Upload unit test coverage"
        uses: codecov/codecov-action@v5
        with:
          files: ./lcov-unit.info
          fail_ci_if_error: false
          use_oidc: true
          flags: unittests
          name: codecov-unit-coverage
          verbose: true

      - name: "Codecov: Upload integration test coverage"
        uses: codecov/codecov-action@v5
        with:
          files: ./lcov-integration.info
          fail_ci_if_error: false
          use_oidc: true
          flags: integration
          name: codecov-integration-coverage
          verbose: true

      - name: "Codecov: Upload doc test coverage"
        uses: codecov/codecov-action@v5
        with:
          files: ./lcov-doc.info
          fail_ci_if_error: false
          use_oidc: true
          flags: doctests
          name: codecov-doc-coverage
          verbose: true

      - name: "Codecov: Upload test results"
        if: success() || failure()
        uses: codecov/test-results-action@v1
        with:
          files: ./target/nextest/ci/junit.xml
          use_oidc: true
          flags: unittests
          name: codecov-test-results

      - name: Generate HTML coverage report
        run: cargo llvm-cov --all-features --workspace --html

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            lcov-unit.info
            lcov-integration.info
            lcov-doc.info
            target/llvm-cov/html/
          retention-days: 30

      - name: Add Codecov summary
        run: |
          echo "## Codecov Reports" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Code Coverage (Multi-Flag)" >> $GITHUB_STEP_SUMMARY
          echo "- Unit tests: \`lcov-unit.info\` → flag: \`unittests\`" >> $GITHUB_STEP_SUMMARY
          echo "- Integration tests: \`lcov-integration.info\` → flag: \`integration\`" >> $GITHUB_STEP_SUMMARY
          echo "- Doc tests: \`lcov-doc.info\` → flag: \`doctests\`" >> $GITHUB_STEP_SUMMARY
          echo "- HTML report: \`target/llvm-cov/html/\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Codecov Dashboard" >> $GITHUB_STEP_SUMMARY
          echo "- [Overall Coverage](https://app.codecov.io/gh/RAprogramm/masterror)" >> $GITHUB_STEP_SUMMARY
          echo "- [Flags View](https://app.codecov.io/gh/RAprogramm/masterror/flags)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Analytics" >> $GITHUB_STEP_SUMMARY
          echo "- JUnit XML: \`target/nextest/ci/junit.xml\`" >> $GITHUB_STEP_SUMMARY
          echo "- [View Test Analytics](https://app.codecov.io/gh/RAprogramm/masterror/tests)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All artifacts uploaded with 30-day retention." >> $GITHUB_STEP_SUMMARY

  benchmarks:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Run benchmarks
        run: cargo bench --no-fail-fast --features benchmarks -- --save-baseline ci-baseline

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: target/criterion/
          retention-days: 30

      - name: Download previous benchmark
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: benchmark-results
          path: target/criterion-previous/

      - name: Compare with baseline
        continue-on-error: true
        run: |
          if [ -d "target/criterion-previous" ]; then
            echo "Comparing with previous benchmark..."
            cargo bench --features benchmarks -- --baseline ci-baseline --noplot
          else
            echo "No previous benchmark found, skipping comparison"
          fi

      - name: Add benchmark summary
        run: |
          echo "## Benchmark Results" >> $GITHUB_STEP_SUMMARY
          echo "Benchmark artifacts uploaded with 30-day retention:" >> $GITHUB_STEP_SUMMARY
          echo "- Criterion reports: \`target/criterion/\`" >> $GITHUB_STEP_SUMMARY
          echo "- Baseline: \`ci-baseline\`" >> $GITHUB_STEP_SUMMARY
