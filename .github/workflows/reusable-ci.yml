name: Reusable CI

on:
  workflow_call:
    inputs:
      all-features:
        type: boolean
        default: true

jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      CARGO_LOCKED: "true"
      CARGO_TERM_COLOR: always

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Read MSRV from Cargo.toml
        id: msrv
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi
          RV=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[0].rust_version // empty')
          if [ -z "$RV" ]; then
            echo "rust-version is not set in Cargo.toml"
            exit 1
          fi
          [[ "$RV" =~ ^[0-9]+\.[0-9]+$ ]] && RV="${RV}.0"
          echo "msrv=${RV}" >> "$GITHUB_OUTPUT"
          echo "Using MSRV: $RV"

      - name: Install Rust (${{ steps.msrv.outputs.msrv }})
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ steps.msrv.outputs.msrv }}
          components: clippy

      - name: Install nightly rustfmt
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: nightly-2025-08-01
          components: rustfmt

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Verify lockfile is committed
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f Cargo.lock ]; then
            echo "CARGO_LOCKED=1 but Cargo.lock is missing. Commit it or drop CARGO_LOCKED."
            exit 1
          fi

      # ---------- README: regenerate early, normalize, drift handling ----------
      - name: Regenerate README via build.rs (MSRV, deterministic)
        shell: bash
        run: |
          set -euo pipefail
          export TZ=UTC
          export LC_ALL=C.UTF-8
          export NO_COLOR=1
          export CARGO_TERM_COLOR=never
          export SOURCE_DATE_EPOCH=0
          cargo +${{ steps.msrv.outputs.msrv }} build --workspace -q || cargo +${{ steps.msrv.outputs.msrv }} build -q

      - name: Normalize README (ensure trailing newline) — bash only
        if: hashFiles('README.md') != ''
        shell: bash
        run: |
          set -euo pipefail
          if [ -f README.md ] && [ -s README.md ]; then
            last_byte="$(tail -c1 README.md 2>/dev/null || true)"
            if [ "$last_byte" != $'\n' ]; then
              printf '\n' >> README.md
            fi
          fi

      - name: README drift report (PR)
        if: github.event_name == 'pull_request'
        shell: bash
        run: |
          set -euo pipefail
          if git diff --quiet -- README.md; then
            echo "README is up to date (PR)."
          else
            echo "::warning::README differs on PR. Tests will use regenerated content."
            git --no-pager diff -- README.md || true
          fi

      - name: README drift autocommit (main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          if git diff --quiet -- README.md; then
            echo "README is up to date (main)."
            exit 0
          fi
          echo "Auto-committing refreshed README on main..."
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add README.md
          git commit -m "chore(readme): auto-refresh [skip ci]"
          git push
      # -----------------------------------------------------------------------

      - name: Check formatting (nightly rustfmt)
        run: cargo +nightly-2025-08-01 fmt --all -- --check

      - name: Clippy (MSRV)
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ inputs.all-features }}" = "true" ]; then
            cargo +${{ steps.msrv.outputs.msrv }} clippy --workspace --all-targets --all-features -- -D warnings
          else
            cargo +${{ steps.msrv.outputs.msrv }} clippy --workspace --all-targets -- -D warnings
          fi

      - name: Tests (MSRV)
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ inputs.all-features }}" = "true" ]; then
            cargo +${{ steps.msrv.outputs.msrv }} test --workspace --all-features --no-fail-fast
          else
            cargo +${{ steps.msrv.outputs.msrv }} test --workspace --no-fail-fast
          fi

      # На PR возвращаем README к HEAD, чтобы дерево стало чистым перед упаковкой
      - name: Restore README to HEAD on PR (keep tree clean)
        if: github.event_name == 'pull_request'
        shell: bash
        run: |
          set -euo pipefail
          if ! git diff --quiet -- README.md; then
            echo "Restoring README.md to HEAD to keep tree clean on PR..."
            git restore --worktree --source=HEAD -- README.md || git checkout -- README.md
          fi

      - name: Ensure tree is clean before package
        shell: bash
        run: |
          set -euo pipefail
          if ! git diff --quiet; then
            echo "Working tree is dirty:"
            git status --porcelain
            exit 1
          fi

      - name: Package (dry-run)
        run: cargo +${{ steps.msrv.outputs.msrv }} package --locked

