name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  checks:
    uses: ./.github/workflows/reusable-ci.yml
    with:
      all-features: true

  publish:
    runs-on: ubuntu-latest
    needs: checks
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (stable, minimal)
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Ensure jq is available
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

      - name: Read MSRV from Cargo.toml (crate = masterror)
        id: msrv
        shell: bash
        run: |
          set -euo pipefail
          CRATE_NAME="masterror"
          RV="$(
            cargo metadata --no-deps --format-version=1 |
              jq -r --arg name "$CRATE_NAME" '
                .packages[]
                | select(.name == $name and .source == null)
                | .rust_version // empty
              ' | head -n1
          )"
          if [ -z "${RV:-}" ]; then
            echo "rust-version is not set for crate: ${CRATE_NAME}"
            exit 1
          fi
          if [[ "$RV" =~ ^[0-9]+\.[0-9]+$ ]]; then
            RV="${RV}.0"
          fi
          echo "msrv=${RV}" >> "$GITHUB_OUTPUT"

      - name: Ensure tag matches Cargo.toml version (crate = masterror)
        shell: bash
        run: |
          set -euo pipefail
          TAG="${GITHUB_REF#refs/tags/}"
          CRATE_NAME="masterror"
          FILE_VER="$(
            cargo metadata --no-deps --format-version=1 |
              jq -r --arg name "$CRATE_NAME" '
                .packages[]
                | select(.name == $name and .source == null)
                | .version
              ' | head -n1
          )"
          if [ -z "${FILE_VER:-}" ]; then
            echo "Cannot determine version for crate: ${CRATE_NAME}"
            exit 1
          fi
          if [ "v${FILE_VER}" != "${TAG}" ]; then
            echo "Tag ${TAG} != ${CRATE_NAME} version v${FILE_VER}"
            exit 1
          fi

      - name: Install Rust (${{ steps.msrv.outputs.msrv }})
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ steps.msrv.outputs.msrv }}

      - name: Maybe publish masterror-template
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          if cargo metadata --no-deps --format-version=1 \
             | jq -e '.packages[] | select(.name=="masterror-template" and .source==null)' >/dev/null; then
            echo "Publishing masterror-template..."
            n=0
            until [ $n -ge 5 ]
            do
              if cargo +${{ steps.msrv.outputs.msrv }} publish -p masterror-template --locked --token "$CARGO_REGISTRY_TOKEN"; then
                echo "masterror-template published."
                break
              fi
              n=$((n+1))
              echo "Retry $n/5 for masterror-template..."
              sleep $((5*n))
            done
          else
            echo "No local masterror-template found; skipping."
          fi

      - name: Wait for crates.io index sync (after template)
        run: sleep 15

      - name: Maybe publish masterror-derive
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          if cargo metadata --no-deps --format-version=1 \
             | jq -e '.packages[] | select(.name=="masterror-derive" and .source==null)' >/dev/null; then
            echo "Publishing masterror-derive..."
            n=0
            until [ $n -ge 5 ]
            do
              if cargo +${{ steps.msrv.outputs.msrv }} publish -p masterror-derive --locked --token "$CARGO_REGISTRY_TOKEN"; then
                echo "masterror-derive published."
                break
              fi
              n=$((n+1))
              echo "Retry $n/5 for masterror-derive..."
              sleep $((5*n))
            done
          else
            echo "No local masterror-derive found; skipping."
          fi

      - name: Wait for crates.io index sync
        run: sleep 15

      - name: Publish masterror
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          n=0
          until [ $n -ge 5 ]
          do
            if cargo +${{ steps.msrv.outputs.msrv }} publish -p masterror --locked --token "$CARGO_REGISTRY_TOKEN"; then
              echo "masterror published."
              exit 0
            fi
            n=$((n+1))
            echo "Retry $n/5 for masterror..."
            sleep $((10*n))
          done
          echo "Failed to publish masterror after retries."
          exit 1
