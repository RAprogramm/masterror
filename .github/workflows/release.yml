# SPDX-FileCopyrightText: 2025 RAprogramm <andrey.rozanov.vl@gmail.com>
#
# SPDX-License-Identifier: MIT

name: Release

on:
  release:
    types: [published]
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v0.24.19)'
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  id-token: write
  attestations: write

jobs:
  checks:
    uses: ./.github/workflows/reusable-ci.yml
    permissions:
      contents: read
      id-token: write
    with:
      all-features: true

  publish:
    runs-on: ubuntu-latest
    needs: checks
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref }}
          fetch-depth: 0

      - name: Install Rust (stable, minimal)
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Ensure jq is available
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

      - name: Read MSRV from Cargo.toml (crate = masterror)
        id: msrv
        shell: bash
        run: |
          set -euo pipefail
          CRATE_NAME="masterror"
          RV="$(
            cargo metadata --no-deps --format-version=1 |
              jq -r --arg name "$CRATE_NAME" '
                .packages[]
                | select(.name == $name and .source == null)
                | .rust_version // empty
              ' | head -n1
          )"
          if [ -z "${RV:-}" ]; then
            echo "rust-version is not set for crate: ${CRATE_NAME}"
            exit 1
          fi
          if [[ "$RV" =~ ^[0-9]+\.[0-9]+$ ]]; then
            RV="${RV}.0"
          fi
          echo "msrv=${RV}" >> "$GITHUB_OUTPUT"

      - name: Determine release tag
        id: release_tag
        shell: bash
        run: |
          set -euo pipefail

          case "${{ github.event_name }}" in
            release)
              TAG="${{ github.event.release.tag_name }}"
              COMMIT="${{ github.event.release.target_commitish }}"
              ;;
            workflow_dispatch)
              TAG="${{ github.event.inputs.tag }}"
              COMMIT=$(git rev-parse "${TAG}^{commit}" 2>/dev/null || echo "")
              if [ -z "${COMMIT}" ]; then
                echo "Error: Tag ${TAG} not found"
                exit 1
              fi
              ;;
            push)
              TAG="${GITHUB_REF#refs/tags/}"
              COMMIT="${GITHUB_SHA}"
              ;;
            *)
              echo "Error: Unsupported event type: ${{ github.event_name }}"
              exit 1
              ;;
          esac

          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "commit=${COMMIT}" >> "$GITHUB_OUTPUT"
          echo "Release tag: ${TAG}"
          echo "Commit SHA: ${COMMIT}"

      - name: Ensure tag matches Cargo.toml version (crate = masterror)
        shell: bash
        run: |
          set -euo pipefail
          TAG="${{ steps.release_tag.outputs.tag }}"
          CRATE_NAME="masterror"
          FILE_VER="$(
            cargo metadata --no-deps --format-version=1 |
              jq -r --arg name "$CRATE_NAME" '
                .packages[]
                | select(.name == $name and .source == null)
                | .version
              ' | head -n1
          )"
          if [ -z "${FILE_VER:-}" ]; then
            echo "Cannot determine version for crate: ${CRATE_NAME}"
            exit 1
          fi
          if [ "v${FILE_VER}" != "${TAG}" ]; then
            echo "Tag ${TAG} != ${CRATE_NAME} version v${FILE_VER}"
            exit 1
          fi

      - name: Check version against crates.io
        id: version_check
        shell: bash
        run: |
          set -euo pipefail
          TAG="${{ steps.release_tag.outputs.tag }}"
          LOCAL_VER="${TAG#v}"
          CRATE_NAME="masterror"

          echo "Local version: ${LOCAL_VER}"

          # Fetch current version from crates.io
          CRATESIO_VER=$(curl -s "https://crates.io/api/v1/crates/${CRATE_NAME}" | jq -r '.crate.max_version // empty')

          if [ -z "${CRATESIO_VER}" ]; then
            echo "Crate not found on crates.io, proceeding with first publish"
            echo "should_publish=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "crates.io version: ${CRATESIO_VER}"

          # Equal versions check
          if [ "${LOCAL_VER}" = "${CRATESIO_VER}" ]; then
            echo "Version ${LOCAL_VER} already published on crates.io"
            echo "should_publish=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Semver comparison using inline Rust script
          TMPDIR=$(mktemp -d)
          mkdir -p "${TMPDIR}/src"
          cat > "${TMPDIR}/src/main.rs" << 'EOF'
          use std::env;

          fn main() {
              let args: Vec<String> = env::args().collect();
              if args.len() != 3 {
                  eprintln!("Usage: compare <version1> <version2>");
                  std::process::exit(1);
              }

              let v1 = match semver::Version::parse(&args[1]) {
                  Ok(v) => v,
                  Err(e) => {
                      eprintln!("Failed to parse version1: {}", e);
                      std::process::exit(1);
                  }
              };

              let v2 = match semver::Version::parse(&args[2]) {
                  Ok(v) => v,
                  Err(e) => {
                      eprintln!("Failed to parse version2: {}", e);
                      std::process::exit(1);
                  }
              };

              if v1 > v2 {
                  println!("greater");
              } else if v1 < v2 {
                  println!("less");
              } else {
                  println!("equal");
              }
          }
          EOF

          cat > "${TMPDIR}/Cargo.toml" << 'EOF'
          [package]
          name = "semver-compare"
          version = "0.1.0"
          edition = "2024"

          [dependencies]
          semver = "1.0"
          EOF

          # Build and run comparison
          COMPARISON=$(cd "${TMPDIR}" && cargo run --quiet -- "${LOCAL_VER}" "${CRATESIO_VER}" 2>/dev/null || echo "unknown")
          rm -rf "${TMPDIR}"

          if [ "${COMPARISON}" = "greater" ]; then
            echo "Local version ${LOCAL_VER} > crates.io version ${CRATESIO_VER}, proceeding"
            echo "should_publish=true" >> "$GITHUB_OUTPUT"
          elif [ "${COMPARISON}" = "less" ]; then
            echo "Local version ${LOCAL_VER} < crates.io version ${CRATESIO_VER}"
            echo "Cannot publish older version"
            echo "should_publish=false" >> "$GITHUB_OUTPUT"
            exit 1
          elif [ "${COMPARISON}" = "equal" ]; then
            echo "Version ${LOCAL_VER} already published on crates.io"
            echo "should_publish=false" >> "$GITHUB_OUTPUT"
          else
            echo "Could not determine version ordering, manual check required"
            echo "should_publish=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi

      - name: Install Rust (${{ steps.msrv.outputs.msrv }})
        if: steps.version_check.outputs.should_publish == 'true'
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ steps.msrv.outputs.msrv }}

      - name: Maybe publish masterror-template
        if: steps.version_check.outputs.should_publish == 'true'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          if cargo metadata --no-deps --format-version=1 \
             | jq -e '.packages[] | select(.name=="masterror-template" and .source==null)' >/dev/null; then
            echo "Publishing masterror-template..."
            n=0
            until [ $n -ge 5 ]
            do
              if cargo +${{ steps.msrv.outputs.msrv }} publish -p masterror-template --locked --token "$CARGO_REGISTRY_TOKEN"; then
                echo "masterror-template published."
                break
              fi
              n=$((n+1))
              echo "Retry $n/5 for masterror-template..."
              sleep $((5*n))
            done
          else
            echo "No local masterror-template found; skipping."
          fi

      - name: Wait for crates.io index sync (after template)
        if: steps.version_check.outputs.should_publish == 'true'
        run: sleep 15

      - name: Maybe publish masterror-derive
        if: steps.version_check.outputs.should_publish == 'true'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          if cargo metadata --no-deps --format-version=1 \
             | jq -e '.packages[] | select(.name=="masterror-derive" and .source==null)' >/dev/null; then
            echo "Publishing masterror-derive..."
            n=0
            until [ $n -ge 5 ]
            do
              if cargo +${{ steps.msrv.outputs.msrv }} publish -p masterror-derive --locked --token "$CARGO_REGISTRY_TOKEN"; then
                echo "masterror-derive published."
                break
              fi
              n=$((n+1))
              echo "Retry $n/5 for masterror-derive..."
              sleep $((5*n))
            done
          else
            echo "No local masterror-derive found; skipping."
          fi

      - name: Wait for crates.io index sync
        if: steps.version_check.outputs.should_publish == 'true'
        run: sleep 15

      - name: Publish masterror
        if: steps.version_check.outputs.should_publish == 'true'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          n=0
          until [ $n -ge 5 ]
          do
            if cargo +${{ steps.msrv.outputs.msrv }} publish -p masterror --locked --token "$CARGO_REGISTRY_TOKEN"; then
              echo "masterror published."
              exit 0
            fi
            n=$((n+1))
            echo "Retry $n/5 for masterror..."
            sleep $((10*n))
          done
          echo "Failed to publish masterror after retries."
          exit 1

      - name: Add release summary
        if: success()
        shell: bash
        run: |
          TAG="${{ steps.release_tag.outputs.tag }}"
          COMMIT="${{ steps.release_tag.outputs.commit }}"

          echo "## 🚀 Release Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** \`${TAG}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${COMMIT:0:7}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Published Packages" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ masterror-template (if exists)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ masterror-derive (if exists)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **masterror**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 [View on crates.io](https://crates.io/crates/masterror)" >> $GITHUB_STEP_SUMMARY
          echo "📋 [View Release](https://github.com/${{ github.repository }}/releases/tag/${TAG})" >> $GITHUB_STEP_SUMMARY

  security:
    runs-on: ubuntu-latest
    needs: publish
    permissions:
      contents: write
      id-token: write
      attestations: write
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install cargo-cyclonedx
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-cyclonedx

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Generate SBOM (CycloneDX)
        shell: bash
        run: |
          set -euo pipefail
          cargo cyclonedx --format json --all-features
          mv masterror.cdx.json sbom.json
          echo "SBOM generated: sbom.json"

      - name: Package crates for release
        shell: bash
        run: |
          set -euo pipefail
          cargo package --locked
          echo "Crates packaged in target/package/"

      - name: Sign SBOM with Sigstore
        shell: bash
        run: |
          set -euo pipefail
          cosign sign-blob \
            --bundle sbom.cosign.bundle \
            --yes \
            sbom.json
          echo "SBOM signed with Sigstore"

      - name: Sign crate artifacts
        shell: bash
        run: |
          set -euo pipefail
          for crate in target/package/*.crate; do
            if [ -f "$crate" ]; then
              cosign sign-blob \
                --bundle "${crate}.cosign.bundle" \
                --yes \
                "$crate"
              echo "Signed: $crate"
            fi
          done

      - name: Generate build provenance attestations
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: |
            sbom.json
            target/package/*.crate

      - name: Upload SBOM to release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            sbom.json
            sbom.cosign.bundle
            target/package/*.crate
            target/package/*.crate.cosign.bundle

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-artifacts
          path: |
            sbom.json
            sbom.cosign.bundle
            target/package/*.crate.cosign.bundle
          retention-days: 90
